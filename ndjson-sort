#!/usr/bin/env node

var readline = require("readline"),
    vm = require("vm"),
    commander = require("commander"),
    requires = require("./requires"),
    expression = require("./expression"),
    output = require("./output");

commander
    .version(require("./package.json").version)
    .usage("[options] [expression]")
    .description("Sort values in a newline-delimited JSON stream." +
      "\n\n  expression: JavaScript expression returning integer, where 'a' and 'b' are row values to compare.")
    .option("-r, --require <name=module>", "require a module", requires, {a: undefined, b: undefined})
    .parse(process.argv);

if (commander.args.length > 1) {
  commander.outputHelp();
  process.exit(1);
}

if (commander.args.length < 1) {
  commander.args[0] = "a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN";
}

var i = -1,
    results = [],
    sandbox = commander.require,
    compare = expression(commander.args[0]),
    context = new vm.createContext(sandbox);

readline.createInterface({
  input: process.stdin,
  output: null
}).on("line", function(line) {
  ++i;
  try {
    results.push(JSON.parse(line));
  } catch (error) {
    console.error("stdin:" + (i + 1));
    console.error(line);
    console.error("^");
    console.error("SyntaxError: " + error.message);
    process.exit(1);
  }
}).on("close", function() {
  results
      .sort(function(a, b) { return sandbox.a = a, sandbox.b = b, compare.runInContext(context); })
      .forEach(output);
});
