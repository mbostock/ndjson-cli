#!/usr/bin/env node

var readline = require("readline"),
    vm = require("vm"),
    commander = require("commander"),
    requires = require("./requires"),
    expression = require("./expression"),
    output = require("./output");

commander
    .version(require("./package.json").version)
    .usage("[options] [expression [initial]]")
    .description("Reduce a newline-delimited JSON stream to a single value." +
      "\n\n  expression: JavaScript expression where 'd' is row value, 'i' is row index, 'p' is accumulator" +
        "\n  initial: JavaScript expression for initial value of accumulator. Defaults to 'd'")
    .option("-r, --require <name=module>", "require a module", requires, {p: undefined, d: undefined, i: -1})
    .parse(process.argv);

if (commander.args.length > 2) {
  commander.outputHelp();
  process.exit(1);
}

if (commander.args.length < 1) {
  commander.args[0] = "p.push(d), p";
  commander.args[1] = "[]";
}

var i = -1,
    sandbox = commander.require,
    unset = commander.args.length < 2 || (sandbox.p = expression(commander.args[1], "initial").runInNewContext(), false),
    reduce = expression(commander.args[0]),
    context = new vm.createContext(sandbox);

readline.createInterface({
  input: process.stdin,
  output: null
}).on("line", function(line) {
  sandbox.i = ++i;
  try {
    sandbox.d = JSON.parse(line);
  } catch (error) {
    console.error("stdin:" + (i + 1));
    console.error(line);
    console.error("^");
    console.error("SyntaxError: " + error.message);
    process.exit(1);
  }
  sandbox.p = unset ? (unset = false, sandbox.d) : reduce.runInContext(context);
}).on("close", function() {
  output(sandbox.p);
});
